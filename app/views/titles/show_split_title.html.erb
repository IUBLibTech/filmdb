<%= render partial: 'show' %>
<br><br><br>
<h4>Physical Objects</h4>
<p class="warning">
	To assign a Physical Object to a different Title, autocomplete the the specific Title in the <i>Reassign to Title</i> field.
	If the Title does not already exist, you must first create it. If the <i>Reassign to Title</i> field is left blank, the Physical
	Object will remain unchange - it will still belong to <i><%= @title.title_text %></i>.
	<br><br>
	To create a new active Component Group
</p>
<%= form_tag update_split_title_path, id: 'split_title_form' do %>
<table id="physical_objects_table">
	<%= hidden_field_tag :map %>
	<tbody>
	<tr>
		<th>IU Barcode</th>
		<th>Gauge</th>
		<th>Can Size</th>
		<th>Reassign To Title</th>
		<th>New Component Group</th>
		<th>Total Objects/Object in Workflow</th>
		<th>Current Location</th>
	</tr>
	<% @title.physical_objects.each do |p| %>
	<tr id="po_<%= p.id %>">
		<td><%= link_to p.iu_barcode, physical_object_path(p) ,target: '_blank' %></td>
		<td><%= p.gauge %></td>
		<td><%= p.can_size %></td>
		<td><%= text_field_tag "title_ids[p_#{p.id}]", '', {class: 'title_text'} %></td>
		<td><%= select_tag :"component_groups[p_#{p.id}]", options_for_select((ComponentGroup::MDPI_GROUP_TYPES ).collect { |ct| [ct,ct] }), class: 'cg_select', include_blank: 'Return to storage' %></td>
		<td class="po_count"></td>
		<td><%= p.current_location %></td>
	</tr>
	<% end %>
	<tr>
		<td colspan="5">
			<%= submit_tag "Split Physical Objects" %>
		</td>
	</tr>
	</tbody>
</table>
<% end %>
<div id="title_sum" class="left _75 ml_10" >

</div>
<script type="text/javascript" charset="utf-8">
	// this is a hash mapping title ids to cg group types (Best copy, reformatting, etc). These group types are in turn keys
	// that map to arrays containing the physical object ids that comprise the members of the component group. This object
	// is converted to a JSON string and stored in the hidden input #map
	var title_map = new Object();
	$(document).ready(function() {
		$('.title_text').autocomplete({
			minLength: 2,
			//source: '<%= autocomplete_title_path %>',
			source: function (request, response) {
				$.ajax({
					url: "<%= autocomplete_title_path %>",
					dataType: "json",
					data: {
						term: request.term,
						exclude: [<%= @title.id %>]
					},
					success: function (data) {
						response(data)
					},
          error: function(jqXHR, textStatus, errorThrown) {
              window.location.replace(jqXHR.url)
          }
				});
			},
			focus: function (event, ui) {
				ajaxTitleSummary(ui.item['value']);
				return false;
			},
			select: function (event, ui) {
				clearTitleSummary();
				$(this).val(ui.item['label']);
				$(this).attr('value', ui.item['label']);
				$(this).attr('title_id', ui.item['value'])
				buildTitleMap();
				updatePoCount($(this), ui.item['value']);
				return false;
			}
		}).focusout(function () {
			clearTitleSummary();
		}).focusin(function() {
			if ($(this).val().length > 0) {
				$(this).val('');
				$(this).attr('value', '');
				$(this).attr('title_id', null);
				$(this).parent().next().find('select').val(null);
				$(this).parent().next().next().find('po_count').html('');
				buildTitleMap();
			}
		});
		$('.cg_select').change(function() {
			buildTitleMap();
		});
		buildTitleMap();
	});


	// hides and clears the title summary popup ddiv
	function clearTitleSummary() {
		$('#title_sum').hide();
		$('#title_sum').html('');
	}

	// handles validation on the form before submitting
	$('#split_title_form').submit(function (event) {
		if (!isSplit()) {
			event.preventDefault();
			swal('Cannot split Title - No Physical Objects assigned to other Titles');
		}
	});

	// performs an ajax call to get an html element displaying the specified title and shows this title summary in the popup div
	function ajaxTitleSummary(id) {
		$.ajax({
			url: '/titles/ajax/' + id,
			error: function(jqXHR, textStatus, errorThrown) {
          window.location.replace(jqXHR.url)
      },
			success: function (result) {
				$('#title_sum').html(result);
				$('#title_sum').show();
			}
		})
	}

	function buildTitleMap() {
		newMap = new Object();
		$('.title_text').each(function() {
			// empty string means the title ID is THIS title's id
			var title_id = ($(this).attr('title_id') == '' || ($(this).attr('title_id') == null) ? '' : $(this).attr('title_id'));
			var po_id = $(this).parent().parent().attr('id').slice(3);
			var cg_type = $(this).parent().next().find('select option:selected').val();
			if (newMap[title_id] == null) {
				newMap[title_id] = new Object();
			}
			if (newMap[title_id][cg_type] == null) {
				newMap[title_id][cg_type] = []
			}
			newMap[title_id][cg_type].push(po_id)
		})
		title_map = newMap
		$('#map').val(JSON.stringify(title_map));
	}

	function updatePoCount(el, titleId) {
		$.ajax({
			url: '../ajax_reel_count/'+titleId,
			error: function(jqXHR, textStatus, errorThrown) {
          window.location.replace(jqXHR.url)
			},
			success: function(response) {
				el.parent().next().next().html(response[0]+'/'+response[1])
			}
		})
	}

	function isSplit() {
		obj = JSON.parse($('#map').val());
		keys = Object.keys(obj)
		return !(keys.includes('') && keys.length == 1)
	}
</script>
