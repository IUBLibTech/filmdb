<script type="text/javascript" charset="utf-8">
  var merge_all = <%= action_name == 'title_merge_selection' %>;
    $(document).ready(function() {
        $('#title_text').focus(function() {
            if ($(this).data('autocomplete')) {
                $(this).autocomplete("destroy");
                $(this).removeData("autocomplete");
                clearTitleSummary();
            }
            $(this).autocomplete({
                minLength: 2,
                //source: '<%= autocomplete_title_path %>',
                source: function(request, response) {
                    $.ajax({
                        url: "<%= autocomplete_title_path %>",
                        dataType: "json",
                        data: {
                            term: request.term,
                            exclude: selectedTitleIds()
                        },
                        success: function(data) {
                            response(data)
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            window.location.replace(jqXHR.url)
                        }
                    });
                },
                focus: function (event, ui) {
                    ajaxTitleSummary(ui.item['value']);
                    return false;
                },
                select: function (event, ui) {
                    clearTitleSummary();
                    addTitle(ui.item['value']);
                    return false;
                }
            });
        }).focusout(function() {
            clearTitleSummary();
        });


        $('#title_autocomplete_select_form').submit(function(event) {
            event.preventDefault();
            var m_id = $('#master_title_id').attr('value');
            if (allChecked()) {
                if (merge_all) {
                    var pos = getPoIds();
                    if (m_id == null || m_id.length == 0) {
                        swal('Select a Master Title', 'You must select a master title to merge. Click the row of the title you wish to be the master record. All metadata from other titles will be merged into this record' )
                        return false;
                    } else if (pos.length == 0) {
                        swal({
                                title: 'No Component Group',
                                text: ' No physical objects are selected. All physical objects for all titles will be returned to storage. Do you wish to continue?',
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Return all to storage'
                            },
                            function() {
                                document.getElementById('title_autocomplete_select_form').submit();
                            });
                        return false;
                    } else {
                        document.getElementById('title_autocomplete_select_form').submit();
                    }
                } else {
                    document.getElementById('title_autocomplete_select_form').submit();
                }
            } else {
                swal("Cannot Process Request", "You must explicitly select whether each Physical Object should be added to the Component Group, returned to storage, or left in workflow.");
            }
        })
    });

    function addTitle(id) {
        $.ajax({
            url: '/title_merge_selection_table_row/'+id,
            data: {merge_all: merge_all},
            error: function(jqXHR, textStatus, errorThrown) {
                window.location.replace(jqXHR.url)
            },
            success: function(result) {
                if (!merge_all && result === "Active") {
                    swal("Cannot Merge", "The title you selected is in active workflow and cannot be merged here. Please use the 'Merge Titles' link instead.")
                } else {
                  $('.title_merge_remove').unbind('click.title_merge_remove_title');
                  $('#title_table').append(result);
                  $('.title_merge_remove').bind('click.title_merge_remove_title', function(event) {
                      var id = $(this).parent().parent().attr('id');
                      $(this).parent().parent().remove();
                      if (id == $('#master_title_id').attr(('value'))) {
                          $('#master_title_id').attr('value', null);
                      }
                      showPhysicalObjects();
                      initTitleSelect();
                  });
                  initTitleSelect();
                  showPhysicalObjects();
                  registerCheckboxes();
                }
            }
        });
    }

    function ajaxTitleSummary(id) {
        $.ajax({
            url: '/titles/ajax/'+id,
            error: function(jqXHR, textStatus, errorThrown) {
                window.location.replace(jqXHR.url)
            },
            success: function(result) {
                $('#title_summary').html(result);
                $('#title_summary').show();
            }
        })
    }

    function showPhysicalObjects() {
        // don't show physical objects when merging in storage titles
        if (merge_all) {
            $.ajax({
                url: "<%= title_merge_physical_object_candidates_path %>",
                data: {ids: selectedTitleIds()},
                error: function (jqXHR, textStatus, errorThrown) {
                    window.location.replace(jqXHR.url)
                },
                success: function (result) {
                    $('#physical_objects').html(result)
                }
            })
        }
    }
    function clearTitleSummary() {
        $('#title_summary').hide().html('');
    }

    function selectedTitleIds(includeMaster=true) {
        var vals = [];
        var sel = (includeMaster ? $('.title_row') : $('.title_row').not('.master_selection'));
        sel.each(function() {
            vals.push($(this).attr('id'))
        });
        return vals
    }

    function initTitleSelect() {
        // remove the event handlers as we don't want to double up on them every time a new row is added/removed
        el = $('#title_table > tbody > tr');
        el.off("click.title_select");
        el.on('click.title_select', function() {
            if ($(this).hasClass('master_selection')) {
                $(this).removeClass('master_selection');
                $('#master_title_id').attr('value', null)
            } else {
                $('.master_selection').removeClass('master_selection');
                $(this).addClass('master_selection');
                $('#master_title_id').attr('value', $(this).attr('id'))
            };
            setHiddenTitleIds();
        });
        setHiddenTitleIds();
    }
    function setHiddenTitleIds() {
        tids = selectedTitleIds(false);
        $('#mergees').attr('value', tids.join(','))
    }
    function getPoIds() {
      if (merge_all) {
        var pos = [];
        $('.po_check:checked').each(function() {
            pos.push($(this).attr('id').substring(3))
        });
        return pos
      }
    }

  // after loading the ajax call results of getCgTable we need to register the checkboxes with event listeners so that
  // we can make them mutually exclusive in their selectivity.
  function registerCheckboxes() {
      $('input:checkbox').change(function() {
          if (this.checked) {
              var kids = $(this).parent().parent().find('input:checkbox');
              if (kids[0] == this) {
                  $(kids[1]).attr('checked', false);
                  $(kids[2]).attr('checked', false);
              } else if (kids[1] == this) {
                  $(kids[0]).attr('checked', false);
                  $(kids[2]).attr('checked', false);
              } else {
                  $(kids[0]).attr('checked', false);
                  $(kids[1]).attr('checked', false);
              }
          }
      });
  }

  function allChecked() {
      var rv = true;
      $('.po_row').each(function() {
          kids = $(this).find('input:checked');
          if (kids.size() === 0) {
              return rv = false;
          }
      });
      return rv;
  }
</script>