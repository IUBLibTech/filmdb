c
exit
@physical_object.physical_object_titles.first.errors.full_messages
@physical_object.physical_object_titles.errors.full_messages
@physical_object.physical_object_titles.first.valid?
@physical_object.physical_object_titles
@physical_object.physical_object_titles.valid?
@physical_object.physical_object_titles.first
c
exit
@physical_object.physical_object_titles.first
@physical_object.
exit
@physical_object.physical_object_titles.first
@physical_object.physical_object_titles.size
@physical_object.titles.class
@physical_object.titles.nil?
@physical_object.errors.full_messages
@physical_object.errors[:titles]
@physical_object.errors
@physical_object.valid?
@physical_object.titles.size
@physical_object.titles
c
@physical_object.physical_object_titles.size
@physical_object.physical_object_titles
@physical_object.titles.size
@physical_object.titles
@physical_objects.titles
titles.size
c
n
titles
titles.size
n
titles
c
@physical_object.titles.size
@physical_object.titles
@physical_object
c
exit
params
@cage_shelf
@physical_object.cage_shelf
@physical_object.cage_shelf_id
!@physical_object.cage_shelf.nil? && @physical_object.cage_shelf != @cage_shelf
@physical_object
c
@physical_object
c
exit
@physical_object.cage_shelf
@cage_shelf
@physical_object.cage_shelf != @cage_shelf
@physical_object
@physical_object.nil? || (!@physical_object.cage_shelf != @cage_shelf)
n
@physical_object
PhysicalObject.find(params[:po_id])
@physical_object
@physical_object.cage_shelf
@physical_object.nil? || (!@physical_object.cage_shelf != @cage_shelf)
 PhysicalObject.find(params[:po_id])
exit
@physical_object
c
(hr * HR)
(hr * HR * MIN)
(hr * HR * MIN) - sec
hr
min
c
(sec - (HR * MIN)) / MIN
sec / HR
sec
c
sec
c
exit
ft * SECONDS_PER_FOOT[:gauge]
SECONDS_PER_FOOT[:gauge]
ft
c
exit
self.top_shelf
self
c
@cage.top_shelf
@cage
c
@cage.top_shelf
exit
@cage.top_shelf
c
@cage
c
Cage.new
@cage
c
@physical_object.physical_object_titles.size
c
@physical_object.physical_object_titles.size
exit
@physical_object.physical_object_titles.size
@physical_object.physical_object_titles
@physical_object.titles.size
c
@physical_object.titles.size
@physical_object.titles
@physical_objcet.titles
exit
params[:physical_object][:title_ids]
c
@title.physical_objects.size
@title.physical_objects
c
@title.physical_objects
c
cv[:rated_condition_rating][matcher[2].to_i - 1][0]
cv[:rated_condition_rating]
c
@title.title_creators.collect { |c| "#{c.role.blank? ? "#{c.name}" : "#{c.role} : #{c.name}"}" }.join(',')
exit
action_name
controller_name
controller_action
@url
c
@continue_url
c
pos
c
params[:id]
@component_group
c
@master_title.summary += 'foo'
@master_title.summary
@master_title
c
exit
exiy
po.shrinkage
po.send(:shrinkage=, shrink.to_f)
shrink.to_f
shrink
c
pos.size
exit
params[:pos][:po_ids].split(',')
params[:pos][:po_ids]
po_ids
pos
exit
cg
c
bad
exit
pos.collect { |p| p.title_id }
pos
bad
c
format.attributes
format.type
format
c
format
C
format
c
format
c
format
c
exit
@spreadsheet
exit
c
po.item_original_identiier
row[@headers[k]]
@headers[k]
c
row[@headers[k]]
@headers[k]
po.item_original_identiier
po
physical_object
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
exit
color_field
bw_field
exit
cc
c
cf
bw_field
bw_field.to_sym
bw_field_to_sym
exit
val_conditions
val_conditions.keys
matcher[1]
matcher
cf
c
exit
u.created_in_spreadsheet
u.created_in_spreadsheet = @spreadsheet
u.created_in_spreadsheet = @spreadsheet.id
u = User.new
User.new.created_in_spreadsheet.class
User.new(username: username, email_address: email, first_name: name.split(' ')[0], last_name: name.split(' ')[1], active: false, created_in_spreadsheet: @spreadsheet.id)
user
c
user
c
email && name
email
name
c
column_index RESEARCH_VALUE
c
existing_series
params[:physical_object][:series_id].blank?
Series.find(params[:physical_object][:series_id])
params[:physical_object][:series_id]
