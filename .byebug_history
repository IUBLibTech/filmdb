c
exit
physical_object.specific
physical_object.actable
exit
physical_object.specific.class
physical_object.actable.class
physical_object.actable
physical_object.specific
physical_object.class
physical_object.iu_barcode
physical_object.actable_id
physical_object.specific
physical_object.actable
c
@physical_object.acting_as.id
c
record.actable.class == EquipmentTechnology and value.size > 0
record.actable.class != EquipmentTechnology && value.size == 0
c
record.actable.class != EquipmentTechnology && value.size == 0
record.actable.class == EquipmentTechnology and value.size > 0
exit
record.actable != EquipmentTechnology && value.size == 0
record.actable.class == EquipmentTechnology and value.size > 0
record.actable.class == EquipmentTechnology
exit
@physical_object.medium
exit
params[:equipment_technology].keys
params
exit
params[:equipment_technology]
params[:equipment_tehnology]
c
exit
record.actable.class == Film
record.actable == Film
record.actable
record.acting_as
record.specific
record.class
record.media
record.medium
record
c
exit
params[:ts]
params
exit
params[:ts]
exit
params.symbolize_keys.merge
exit
params
params[:ts]
exit
params
c
exit
response.disposition
response.content_disposition
response.content_type
response.format
response.class
response.keys
response
format
exit
results.size
results
n
q
c
titles.size
titles
c
exit
c
self
c
self
exit
c
@spread_sheet_search
c
exit
params
exit
t.sql
t
exit
c
params[:digitized_status]
c
exit
params
params[:digitized_status]
exit
params
exit
params
digitized_status
c
tempTblSql
c
sql
exit
params
exit
@title.avalon_url
c
Settings.pod_qc_pass
Settings.pod_qc_user
pod_qc_user
url
c
n
@resp
n
params[:casticket]
c
params[:casticket]
=params[:casticket]
c
!current.valid_next_workflow?(status_name, override)
!current.valid_next_workflow?(status_name, override
!SPREADSHEET_START_LOCATIONS.include?(status_name)
current.nil?
exit
x.serialize(f.path)
f.path
f
exit
films
exit
wb.sheet_by_name "Films"
wb.worksheets[0]
wb.worksheets["Films"]
wb.worksheets.size
wb.worksheets
wb.sheets
c
po.specific.medium
po.specific
po
t
c
@titles.first
@titles.class
@titles
c
exit
@titles.size
@titles
c
@titles.size
@titles
exit
@titles.ize
@titles
c
@titles.size
@titles
exit
@titles.size
c
@titles.class
@titles
exit
args.class
exit
args.is_a? Hash
args.is_a? ActionController::Parameters
args
params
a.dup << "="
a
exit
a
n
c
exit
n
r
n
args
exit
m
c
exit
c
iu_barcode_changed?
iu_barcode
iu_barcode_was
c
iu_barcode_was
iu_barcode_changed?
id
exit
iu_barcode_was
iu_barcode
changed
exit
trigger
trigger.attributes
trigger.old
trigger.object_id
trigger.object
trigger.
trigger
object
self
self.class
self.object_id
self.object
self
self.ids
self.id
self
self.id
exit
r
n
self
OLD.id
exit
c
exit
old
c
!old.include?(record.acting_as.id)
old
exit
args.keys.each do |a| puts "#{a}\n" end
args.each do |a| puts "#{a}\n" end
args
args.each do |a| puts "#{a}\n" end
args.each do |a| puts "#{a.dup << '='}\n" end
a.dup
args
n
NESTED_ATTRIBUTES
n
args.is_a? ActionController::Parameters
n
args.keys.each do |k| puts "#{k}: #{args[k]}\n***" end
args
n
args.keys
args.keys.each do |k| puts "#{k}: #{args[k]}\n***" end
args.keys.each do |k| puts "#{k}: #{args[k]}\n***}
params[:film].keys.each do |k| puts "#{k}: #{params[:film][k]}\n***" end
args
c
exit
