physical_objects.first.waiting_active_component_group_members?exit
physical_objects.first.waiting_active_component_group_members?
c
(@count / Title.per_page.to_f).ceil
c
(@count / Title.per_page).to_f.ceil
exit
x
x = 100.0
(@count / Title.per_page)
(@count / Title.per_page).to_f.ceil
exit
(@count / Title.per_page)
(@count / Title.per_page).to_f
@count.to_f
Title.per_page.class
Title.per_page
exit
Title.per_page
@count / Title.per_page
(@count / Title.per_page).ceil
c
exit
@count / 100.0
@count / Title.per_page
@count
(@count / Title.per_page).ceil
c
@count
c
p.active_scan_settings
ComponentGroup.find(7127).title.summary
ComponentGroup.find(7127).title.title_summary
ComponentGroup.find(7127).title.title_text
ComponentGroup.find(7127)
p.active_component_group
c
p.active_component_group
p.active_component_group.title
p.active_component_group
c
p.active_component_group?
p.active_component_group
p
exit
@title.physical_objects.first.current_location
@title.physical_objects.select{|p| (!WorkflowStatus.is_storage_status?(p.previous_location) && (p.current_location != p.previous_location))}.size
@title.physical_objects.select{|p| (!WorkflowStatus.is_storage_status?(p.previous_location) && (p.current_location != p.previous_location))}
c
map
c
map
exit
JSON.parse(params[:title_map])
JSON.parse(title_map)
c
exit
JSON.parse(params[:title_map])
JSON.parse(params[:title_map]
c
exit
c
params
c
exit
flash[:merged]
flash[:merged][:all]
c
flash[:merge][:all]
flash[:merge]
c
exit
Title.find(params[:id])
params[:id]
exit
params[:merge_all] == 'true'
params[:merge_all] == 'false'
@title.in_active_workflow?
@title
c
params
exit
tempTblSql
exit
tempTblSql
tempTableSql
exit
Title.where("title_text like '%#{"Copy's".gsub("'", "\\\\'")%'}
"Copy's".gsub("'", "\\\\'")
"Copy's".gsub("'", "\\\'")
"Copy's".gsub("'", "\'")
"Copy's".gsub("'", "\\'")
"Copy's".gsub("'", "\'")
"Copy's".gsub("'", "\\")
"Copy's".gsub("'", "\\\\'")
"Copy's".gsub("'", "\\\'")
"Copy's".gsub("'", "\\'")
"Copy's".gsub("'", "\'")
title_text.gsub("'", "\\'")
title_text
c
p.active_component_group
p.iu_barcode
p = @component_group.physical_objects.first
p
exit
p.active_scan_settings
ComponentGroup.last.physical_objects
ComponentGroup.last
p.active_component_group
p = @new_cg.physical_objects.first
@new_cg
c
@new_cg.physical_objects.first.iu_barcode
@new_cg.physical_objects.size
@new_cg.physical_objects
@new_cg
exit
@new_cg.physical_objects.size
@new_cg.physical_objects
@new_cg
c
unchecked
checked
exit
params
exit
params
exit
params
exit
params
unchecked
checked
@new_cg
ComponentGroup.last
exit
params[:component_group][:component_group_physical_objects_attributes].keys
params[:component_group][:component_group_physical_objects_attributes]
params[:component_group][:component_group_physical_object_attributes]
params[:component_group][:component_group_physical_object_attributes].keys
params[:component_group[:component_group_physical_object_attributes]]
params[:component_group[:component_group_physical_object_attributes]].keys
params[component_group[component_group_physical_object_attributes]].keys
params
exit
params
c
(action_name == 'edit' && !@collection.nil?)
c
action_name == 'edit' && @collection.nil?
action_name == 'edit' && @collection
action_name == 'edit'
action_name == 'edit' && @collection
exit
@cage.bottom_shelf.identifier
cage.bottom_shelf.identifier
c
set[:start_date][:approximation] = (dates[0][0] == '[' && dates[0][-1] == ']')
set[:start_date]
(dates[0][0] == '[' && dates[0][-1] == ']')
dates
c
n
set[:start_date]
set
set[:start_date][:approximation] = (dates[0][0] == '[' && dates[0][-1] == ']')
set[:start_date]
'[' && dates[0][-1] == ']'
dates[0][0]
exit
dates
c
year[-1]
year
n
match
n
dates
c
@title.title_dates.first
c
date_set[:end_date].nil?
self
n
date_set
exit
JSON.pretty_generate @pp
JSON.pretty_generate(PodPush.find(params[:id]).response)
@pp.class
c
Title.includes(:physical_object_titles).where(physical_object_titles: {title_id: nil}).size
Title.all.size
n
(@unit || @collection || @startTime || @endTime) |= nil
@unit || @collection || @startTime || @endTime
any_filters?
exit
po
exit
@headers['Series Part']
c
ControlledVocabulary.new(model_type: 'ComponentGroup', model_attribute: ':group_type', value: val, active_status: true, menu_index: i + 3)
ControlledVocabulary.first.active_status
c
loc
c
@cg.group_type
c
exit
@cg.group_type
loc
c
prev_cg
<<<<<<< HEAD
=======
exit
prev_cg
exit
res.first
res
c
@component_group.group_type == ComponentGroup::BEST_COPY_MDPI_WELLS
@component_group
n
c
params[:color_space]
params
c
params[:component_group][:color_space]
params
exit
p.gauge
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT[p.gauge]
p.gauge
p
exit
hh_mm_sec(calc_estimated_duration(@physical_objects))
@physical_objects.collect{|p| p.titles }.flatten.uniq.size
@physical_objects.collect{|p| p.titles }.flatten.uniq
@physical_objects.collect{|p| p.titles }.flatten
@physical_objects.collect{|p| p.titles }
@physical_objects
exit
@physical_object.workflow_statuses
@physical_object
c
@physical_object.same_active_component_group_members?
c
other_title
c
(cg.title.physical_objects.to_a - cg.physical_objects.to_a)[0].in_storage?
(cg.title.physical_objects.to_a - cg.physical_objects.to_a)[0].current_location
cg.title.physical_objects.to_a - cg.physical_objects.to_a
cg
other_title != @title
