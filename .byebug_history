c
params[:physical_object][:ad_strip]
c
next
help
format
c
title
c
new_title
new_series
c
params[:physical_object][:series_id].blank? && !params[:physical_object][:series_title_text].blank?
c
params[:physical_object][:series_title_text]
c
params[:physical_object][:series_title_text]
params[:series_title_text]
params[:series_title]
params[:series_id]
c
@physical_object.title.series
@physical_object.title
c
User.where(username: current_username).first
current_username
c
current_username
c
current_username
User.where(username: current_username).first
User.where(username: current_username)
c
User.current_username
current_username
current_user
Thread.current
Thread.current[:current_username]
Thread.current[:current_user]
c
User.where(username: current_user).first
User.where(username: current_user)
current_user
User.current_user_object.first
User.current_user_object
c
controller
c
controller
c
params[:controller] == "physical_objects"
params[:controller] == "physical objects"
params[:controller]
params[:controller] == 'physical objects'
controller == Collection
controller == PhysicalObject
controller
exit
params[:controller]
controller
c
@physical_object.inventorier
@physical_object.modified_by
@physical_object.modifier
c
@physical_object.modifier
@physical_object
exit
c
v.model_attribute.tr(':', '').to_sym
cv_map[v.model_attribute.tr(':', '').to_sym]
cv_map
c
v.value
cv_map
c
cv_map
exit
c
cv
c
@physical_object.unit_id
@physical_object.collection_id
@physical_object.inventoried_by
c
@physical_object.inventoried_by
@user
c
@user
c
current_user
User.current_username
c
@collection_inventory_configuration.collection.name
@collection_inventory_configuration.collection
@collection_inventory_configuration
params[:id]
@params[:id]
c
User.where(created_in_spreadsheet: @spreadsheet.id).first.email_address
User.where(created_in_spreadsheet: @spreadsheet.id).size
User.where(created_in_spreadsheet: @spreadsheet.id)
@spreadsheet
c
po.errors
unit
c
po.errors
po.valid?
po.errors
po.errors.any?
po.errors.any
c
sss
c
bad_header
c
HEADERS_TO_ASSIGNER
c
@series
c
exit
c
return
help
?
c
po.errors.messages
po.errors
po.valid?
exit
row_data[headers['Unit']]
headers['Unit']
headers
c
xlsx.row(1)
c
xlsx.row(1)
c
xlsx
xlsx[0]
xslx
headers.keys.sort
headers['Unit']
headers
c
ss
c
@physical_object
c
row_data[headers[k]]
HEADERS_TO_ASSIGNER[k]
exit
c
row_data[headers[k]]
row_data[headers[k]
HEADERS_TO_ASSIGNER[k]
c
row_data[headers[k]]
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
exit
c
HEADERS_TO_ASSIGNER[k]
row_data[headers[k]]
row_data[2]
headers[k]
c
validate_physical_object(xlsx.row(row), headers)
c
exit
validate_physical_object(xlsx.row(row), headers)
c
bad_header
bad_headers
c
headers
c
bad_header
c
sss
c
User.authenticate(@resp_user)
c
User.valid_usernames
User.authenticate(@resp_user)
@resp_user
exit
@resp.slice(5,@nlength)
@resp.length - 7
@resp_user=@resp.slice(5,@nlength)
@resp_user
User.authenticate(@resp_user)
@resp.slice(0,3)
@resp
c
row_data
row data
po.title
po
c
validated_physical_objects[96]
validated_physical_objects[96].valid?
exit
error_rows[97].messages.keys
error_rows[97].messages
error_rows[96].messages
error_rows[96][:messages]
error_rows[96]
error_rows.keys
error_rows[0]
error_rows
exit
validated_physical_objects[97].valid?xit
validated_physical_objects
error_rows.size
error_rows
c
validated_physical_objects[97].valid?
validated_physical_objects[97]
validated_physical_objects.size
xlsx.rows.size
xlsx
xslx
error_rows
xlsx.rows.size
xlsl
c
return
c
po.errors[:title]
po.errors
c
po.valid?
c
xlsx.row(1)
xlsx[1]
xlsx
c
exit
row_data
row_data[headers['Date Inventoried*']]
headers['Date Inventoried*']
c
date
c
root_url
return
c
headers['Accompanying Documentation']
c
headers['Accompanying Documentation']
xlsx.row(row)[headers['Accompanying Documentation']]
c
@file.blank?
