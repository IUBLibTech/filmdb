c
@physical_object.physical_object_titles.uniq.collect{|t| t.title_id}
c
@physical_object.physical_object_titles.uniq
@physical_object.physical_object_titles.uniq.pluck[:title_id]
exit
@physical_object.physical_object_titles.uniq
c
@physical_object.physical_object_titles.collect{|pt| pt.title_id}
@physical_object.physical_object_titles
@physical_object.actual_title_ids
c
exit
@physical_object.physical_object_titles
@physical_object.actual_title_ids
Title.find(178477)
SELECT  `titles`.* FROM `titles` WHERE `titles`.`id` = 178477 LIMIT 1
@physical_object.actual_title_ids
exit
params[:physical_object]
params[@physical_object.medium.downcase.parameterize.underscore.to_sym]
c
@physical_object.physical_object_titles.collect { |t| t.title_id }.join(',')
@physical_object.physical_object_titles
c
@physical_object.physical_object_titles
n
c
@physical_object.physical_object_titles
@physical_object.titles
n
@physical_object.titles
exit
@physical_object.titles
@physical_object
c
n
c
params[:medium_changed]
exit
@cv
exit
self.medium
[Film, Video].include?(self.specific.class)
self.specific.class
self.specific
exit
request.get?
request.post?
params[:medium_changed]
params
exit
params
exit
c
params[:original_action]
@physical_object
n
params
medium
n
medium
original
n
params
c
params[:original_action]
exit
params
c
params
exit
params.keys
params[:video] = {}
params.add(:video, {})
params
params.delete(:film)
c
params
params.keys
params = params.merge(mer)
params
mer
mer[medium] = params[original]
mer = {}
m = {}
m = {medium => params[original]}
m
params
m = {medium => params[original]}
m = {medium => params[original]
c
params
params = params.merge(merge)
params
merge
params.keys
params[:video]
params.merge(merge)
merge = {medium => params[original]}
params.merge(medium, params[original])
exit
params.except(original)
original
params[:film]
params[:film
params.except(original)
original
params[:video]
params
params.except(original)
params[medium] = merge
params[:medium]
params[medium].merge(merge)
medium
merge
exit
params
n
exit
physical_object_params
c
medium == :video
medium == :film
c
medium
exit
params
c
n
c
exit
User.all
u = User.where(username: 'jaalbrec').first
u = User.where(username: 'jaalbrec')
!active_user?(username)
username.nil? || username.blank?
exit
??
?
User.authenticate(@resp_user)
n
@resp.slice(0,3)
@resp
exit
po.specific
po = physical_object_params
po
po = PhysicalObjectsHelper.physical_object_params
merge
n
params[original]
n
params[original]
n
params
n
params
exit
params[:original]
params[:original
medium
original
params
exit
params[:video]
params[:video] = params[:film]
params
params[:film]
params[:video]
params.class
params
c
exit
params
c
@physical_object.humanize_boolean_fields(PhysicalObject::GENERATION_FIELDS)
@physical_object
PhysicalObject::GENERATION_FIELDS
c
error
c
@physical_object.acting_as.gauge
@physical_object.acting_as
@physical_object.gauge
@physical_object.class
@physical_object.Class
@physical_object.class
exit
@physical_object.save
@physical_object.gauge
@physical_object.iu_barcode
@physical_object
c
@physical_object.acting_as
@physical_object.specific
@physical_object.gauge
@physical_object
c
@physical_object
@physical_object.specific.gauge
error
n
@physical_object
c
@physical_object.medium.downcase.parameterize.underscore.to_sym
c
@physical_object
c
n
N
exit
params[:physical_object]
params[:film][:medium]
params
c
id.fields_for
id.fields
id.class
id
exit
self.acting_as.media_type = 'Moving Image'
self.acting_as.media_type
self.acting_as
self.acting_ass
self.class
super.media_type
super.media
self.attributes
self.media_type
self.nil?
self
c
n
@physical_object
c
"physical_objects/#{physical_object_specific_path}/show"
c
PhysicalObject::MEDIA_TYPE_MEDIUMS['Moving Image']
exit
params[:medium]
params[:physical_object]
params
exit
self.specific
self
c
exit
@cg.id
@physical_object.component_group_id
@cg.title
@cg
n
@physical_object.titles
c
exit
