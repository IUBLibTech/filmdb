c
loc
c
@cg.group_type
c
exit
@cg.group_type
loc
c
prev_cg
exit
prev_cg
exit
res.first
res
c
@component_group.group_type == ComponentGroup::BEST_COPY_MDPI_WELLS
@component_group
n
c
params[:color_space]
params
c
params[:component_group][:color_space]
params
exit
p.gauge
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT[p.gauge]
p.gauge
p
exit
hh_mm_sec(calc_estimated_duration(@physical_objects))
@physical_objects.collect{|p| p.titles }.flatten.uniq.size
@physical_objects.collect{|p| p.titles }.flatten.uniq
@physical_objects.collect{|p| p.titles }.flatten
@physical_objects.collect{|p| p.titles }
@physical_objects
exit
@physical_object.workflow_statuses
@physical_object
c
@physical_object.same_active_component_group_members?
c
other_title
c
(cg.title.physical_objects.to_a - cg.physical_objects.to_a)[0].in_storage?
(cg.title.physical_objects.to_a - cg.physical_objects.to_a)[0].current_location
cg.title.physical_objects.to_a - cg.physical_objects.to_a
cg
other_title != @title
other_title
exit
other_title
cg.group_type == ComponentGroup::BEST_COPY_ALF ? WorkflowStatus::BEST_COPY_ALF : WorkflowStatus::BEST_COPY_WELLS
cg.group_type == ComponentGroup::REFORMATTING_MDPI
c
cg
exit
middle_shelf.returned || middle_shelf.mdpi_barcode.nil?
top_shelf.returned || top_shelf.mdpi_barcode.nil?
can_be_shipped?
c
exit
!@physical_object.current_workflow_status.status_name != WorkflowStatus::WELLS_TO_ALF_CONTAINER
@physical_object.current_workflow_status.status_name
!@physical_object.current_workflow_status.status_name != WorkflowStatus::WELLS_TO_ALF_CONTAINER
c
@physical_object.current_location
c
@physical_object.current_workflow_status.status_name == WorkflowStatus::WELLS_TO_ALF_CONTAINER
exit
status_name
current.valid_next_workflow?(status_name, override)
(!current.nil? && !current.valid_next_workflow?(status_name, override))
(current.nil? && !SPREADSHEET_START_LOCATIONS.include?(status_name))
current.nil?
exit
params[:component_group]
params
c
FREEZER_AD_STRIP_VALS.include?(ad_strip)
c
FREEZER_AD_STRIP_VALS.include?(ad_strip)
c
FREEZER_AD_STRIP_VALS.include?(ad_strip)
c
exit
!@physical_object.active_component_group.group_type == 'Best Copy (MDPI - Wells)'
exit
@user.updated_at.localtime + SessionsHelper::TIME_OUT < Time.now.localtime
@user.updated_at.localtime
@user.works_in_both_locations
c
x_low > @page
c
@page
x_low
c
params[:collection_id]
exit
res.first[0]
res.first
res
exit
@count.columns
@count[:count]
@count['count']
@count.class
@count[0]
@count
exit
@count[0].class
@count[0]
@count
exit
Title.titles_not_in_spreadsheet(params[:title], @spreadsheet.id)
@existing_titles
Title.titles_in_spreadsheet(Title.find(params[:title]).title_text, @spreadsheet.id)
Title.titles_in_spreadsheet(Title.find(params[:title]).title_text, @spreadsheet.id).size
exit
@existing_titles.size
@existing_titles
exit
(cg.title.physical_objects.to_a - cg.physical_objects.to_a).collect{|p| p.id}
cg.physical_objects.collect{|p| p.id}
cg.title.physical_objects.collect{|p| p.id}
(cg.title.physical_objects.to_a - cg.physical_objects.to_a).collect{|p| p.id}
cg.title.physical_objects.to_a - cg.physical_objects.to_a
cg.physical_objects.collect{|p| p.id}
cg.title.physical_objects.collect{|p| p.id}
exit
Title.first.title_publishers.to_a
PhysicalObject.first.dates.to_a
stored.collect{|p| p.id}
cg.title.physical_objects.size
cg.title.physical_objects
stored.collect{|p| p.id}
c
stored.collect{|p| p.id}
stored
c
n
exit
session
c
FREEZER_AD_STRIP_VALS.include?(ad_strip)
FREEZER_AD_STRIP_VALS
exit
FREEZER_AD_STRIP_VALS
stats
exit
po
status_name
c
@title.id
other_title
title
@map
c
@map
params[:map]
params[:map].keys
params[:map]
@title.id
title.id
c
@title.id
title.id
title
p
c
po.storage_location
po
p.storage_location
storage_location
c
po.active_component_group
c
po.active_component_group
c
po.active_component_group
c
p.active_component_group
c
po.current_location
status_name
c
po
next
po
exit
xeit
po
next
params
c
params
self
this
stats.first
stats
exit
@map[title].keys
@map[title]
c
@map
c
@cg.group_type == ComponentGroup::BEST_COPY_ALF
@cg.group_type == WorkflowStatus::BEST_COPY_ALF
exit
WorkflowStatus::BEST_COPY_ALF
@cg.group_type == WorkflowStatus::BEST_COPY_ALF
@cg.group_type
exit
@cg.group_type
loc
c
@scan_resolutions
exit
c
@can_sizes
can_sizes
exit
@can_sizes
exit
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
PhysicalObject.all.collect{|p| p.current_location}
exit
PhysicalObject.all.collect{|p| p.current_location}
c
PhysicalObject.all.collect{|p| p.current_location}
exit
params[:physical_object][:location]
params
c
status_name
c
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
p.current_workflow_status.status_name
c
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
p.current_workflow_status.status_name
c
p.current_workflow_status.status_name
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
c
Title.find(1)
ComponentGroup.first.title_id
ComponentGroup.first
PhysicalObject.all.collect{ |p| p.component_group_id }
@physical_objects.size
@physical_objects
PhysicalObject.last.active_component_group
PhysicalObject.first.active_component_group
c
exit
PhysicalObject.first.active_component_group
Title.first.physical_objects.collect{|p| p.current_workflow_status.status_name}
c
@cg
c
Title.first.physical_objects.collect{|p| p.current_workflow_status.status_name}
Title.first.physical_objects.collect{|p| p.location}
Title.first.physical_objects.collect{|p| p.current_workflow_status}
Title.first.title_text
Title.all.size
exit
Title.all.size
c
Title.find(400)
@master
c
if false x = 23 end
any_in_work_flow
if any_in_work_flow puts 'yes' end
if any_in_work_flow
c
any_in_work_flow
c
any_in_work_flow
c
<<<<<<< Updated upstream
=======
any_in_work_flow
p.active_component_group.nil?
c
any_in_work_flow
c
@physical_objects
n
>>>>>>> Stashed changes
