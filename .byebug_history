exit
c
PhysicalObject.where(id: po_ids).first.iu_barcode
PhysicalObject.where(id: po_ids).size
PhysicalObject.where(id: po_ids)
po_ids
pod_ids
exit
@user.updated_at + SessionsHelper::TIME_OUT < Time.now
c
@user.updated_at + SessionsHelper::TIME_OUT < Time.now
c
session[:return_to]
request.fullpath
c
request.fullpath
c
@wells
@alf
c
u.worksite_location == 'ALF'
u.worksite_location
c
@user.worksite_location.blank?
@user.worksite_location.blank
@user
c
User.where(username: session[:username]).first.works_in_both_locations?
User.where(username: session[:username]).first.works_in_both_locations
exit
c
@physical_object.active_component_group.scan_resolution
exit
c
exit
!po_ids.include?(p.id.to_s)
!po_ids.include?(p.id)
p.id
po_ids
exit
@returned.size
@return.size
c
@cg_pos[0].workflow_statuses.last
@cg_pos
@cg_pos.size
@component_group.physical_objects.size
@component_group.physical_objects
@component_group.group_type
@component_group.group_typ
@component_group.type
po_ids.include? po_ids.first
@pos.size
@returned.size
@returned
c
@cg_pos
c
@pos.size
@pos
po_ids
c
current.status_name
current
status_name
(!current.nil? && !current.valid_next_workflow?(status_name))
(current.nil? && !SPREADSHEET_START_LOCATIONS.include?(status_name))
((current.nil? && !SPREADSHEET_START_LOCATIONS.include?(status_name))
exit
!@physical_object.current_workflow_status.status_name == WorkflowStatus::MOLD_ABATEMENT
!@physical_object.current_workflow_status.status_name != WorkflowStatus::MOLD_ABATEMENT
!@physical_object.in_transit_from_storage?
!@physical_object.in_transit_from_storage? && !@physical_object.current_workflow_status.status_name != WorkflowStatus::MOLD_ABATEMENT
c
po.send((sym.to_s << "=").to_sym, true)
(sym.to_s << "=").to_sym
exit
po.send(sym, true)
sym
exit
field
c
field.to_sym
PhysicalObject::GENERATION_FIELDS
PhysicalObject::GENERATION_FIELDS.include?(field.to_sym)
exit
@cv[:overall_condition_rating].collect { |x| x[0] }
c
cf.downcase
bool_conditions
bool_conditions.include?(cf.downcase)
exit
langs
lf
@l_cv[:language][index][0]
exit
cv[:rated_condition_rating]
val_conditions.include?(matcher[1].downcase)
cf
cv[:rated_condition_rating][matcher[2].to_i - 1][0]
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
cv[:rated_condition_rating][matcher[2].to_i - 1][0]
value: cv[:rated_condition_rating][matcher[2].to_i - 1][0
matcher && val_conditions.include?(matcher[1].downcase)
matcher[1]
c
show_worksite_location_url
@user.id
@user
c
session[:username]
User.current_user_object
exit
User.current_user_object
signed_in?
exit
Thread.current[:username]
session[:username]
c
current_user
current_username
current_user_name
exit
current_user
User.current_user_object
u
c
params[:physical_object][:updated] == '0'
params[:physical_object][:updated] == '1'
c
params[:physical_object][:updated] == false
params[:physical_object][:updated] == true
params[:physical_object][:updated]
c
@physical_object
n
c
params[:id]
params[:physical_object]
params[:physical_object][:id]
params
c
params
c
po.current_workflow_status
n
po.current_workflow_status
c
po.current_workflow_status
n
c
po.current_workflow_status
n
WorkflowStatus.build_workflow_status(location, po)
WorkflowStatus::SPREADSHEET_START_LOCATIONS.include?(location)
exit
location
c
WorkflowStatus::STATUSES
WorkflowStatus::STATUS_TYPES_TO_STATUSES.keys
WorkflowStatus::STATUS_TYPES_TO_STATUSES[WorkflowStatus::BEST_COPY]
exit
WorkflowStatus::STATUS_TYPES_TO_STATUSES[WorkflowStatus::BEST_COPY]
c
@physical_object.active_component_group
@physical_object
c
@physical_object.cage_shelf != @cage_shelf
@physical_object.cage_shelf
@physical_object
c
@physical_object.cage_shelf
@physical_object.cage_shelf != @cage_shelf
PhysicalObject.find(params[:po_id])
c
WorkflowStatus::STATUSES_TO_NEXT_WORKFLOW['Mold Abatement'].each_with_index do |match, index| puts match end
WorkflowStatus::STATUSES_TO_NEXT_WORKFLOW['Mold Abatement'].each_with_index do |match, index| puts "#{match}: #{match.include?('(ALF)')" end
status
WorkflowStatus::STATUSES_TO_NEXT_WORKFLOW.keys.each do |status| puts "#{status}: #{status.include?('(ALF)')}" end
c
PULLABLE_STORAGE
c
@physical_object.current_workflow_status
c
@physical_object.current_workflow_status
exit
physical_object
current
exit
status_name
STATUSES_TO_NEXT_WORKFLOW[status_name].include? next_workflow
c
next_workflow
next_Workflow
exit
c
status_name
physical_object.current_workflow_status.valid_next_workflow?(status_name)
physical_object.current_workflow_status.nil? && status_name != JUST_INVENTORIED
c
p.current_workflow_status.whose_workflow
p.current_workflow_status
c
ALF_GROUP_TYPES.include?(group_type) ? WorkflowStatus::MDPI : WorkflowStatus::IULMIA
exit
po.active_component_group.which_workflow
c
po.active_component_group.nil?
po.active_component_group
status_name
c
find_workflow(status_name, physical_object)
c
physical_object.active_component_group
p
c
value.size
c
value.size
value
record.titles.size
record
value
c
titles.size
c
exit
physical_object.current_workflow_status.nil? && status_name != JUST_INVENTORIED
status_name
c
ApplicationHelper.valid_barcode?(value)
ApplicationHelper.barcode_assigned?(value)
value
c
others
exit
all.size
all
others
c
@physical_object
c
@physical_object
c
@msg
@physical_object.workflow
@physical_object
exit
