c
id.fields_for
id.fields
id.class
id
exit
self.acting_as.media_type = 'Moving Image'
self.acting_as.media_type
self.acting_as
self.acting_ass
self.class
super.media_type
super.media
self.attributes
self.media_type
self.nil?
self
c
n
@physical_object
c
"physical_objects/#{physical_object_specific_path}/show"
c
PhysicalObject::MEDIA_TYPE_MEDIUMS['Moving Image']
exit
params[:medium]
params[:physical_object]
params
exit
self.specific
self
c
exit
@cg.id
@physical_object.component_group_id
@cg.title
@cg
n
@physical_object.titles
c
exit
signin_url
c
exit
(tos.to_a - [self]).size
tos.to_a - [self]
tos.to_a - self
t
selft = tos.to_a
self
tos.to_a
tos.to_a - self
tos
physical_objects.first.titles.size
physical_objects.first.titles
physical_objects.size
physical_objects
c
tos
c
@physical_object.modifier
c
locs == [WorkflowStatus::BEST_COPY_MDPI_WELLS] || locs == [WorkflowStatus::BEST_COPY_ALF]
locs
c
locs
c
@title
@title.fully_cataloged
@title.fully_catalaged
c
@cv[:can_size].sort_by!{|s| s[0][/\d+/].nil? ? 3001 : s[0][/\d+/].to_i}
@cv[:can_size].sort_by!{|s| s[0][/\d+/].nil? ? 3001 : s[0][/\d+/].to_i
@cv[:can_size]
error
c
active_cg
exit
po.active_component_group
cg
exit
params[:return].nil?
params[:return]
params
exit
params
po
c
@pos.size
@pos
pos
n
ws
n
ws
exit
params[:component_group]
PhysicalObject.where(id: checked)
exit
checked
PhysicalObject.where(id: checked)
params[:id]
params[:t_id]
exit
params
checked
c
params
exit
p.active_scan_settings&.scan_resolution
p&.active_scan_settings.scan_resolution
p
c
p.active_component_group.physical_objects.collect{|p| p.active_scan_settings.scan_resolution}
p.active_component_group.physical_objects.collect{|p| p.active_scan_settings}
p.active_component_group.physical_objects
p.active_scan_settings.scan_resolution
p.active_scan_settings
p
c
p.active_component_group.is_mdpi_workflow?
exit
eit
exit
@resp_user
c
n
signin_url
signed_in?
c
flash[:notice]
n
flash[:notice]
c
@active && (p.current_location == WorkflowStatus::JUST_INVENTORIED_WELLS)
@active && (p.current_location == WorkflowStatus::JUST_INVENTORIED_ALF)
p.current_location
c
@active && (p.current_location == WorkflowStatus::JUST_INVENTORIED_ALF)
)
@active && (p.current_location == WorkflowStatus::JUST_INVENTORIED_ALF
n
p.current_location
c
params
c
params
@checked
c
User.current_user_object.worksite_location
exit
params
c
format.html
format
c
link_to "Download Search Results", root_path(params.symbolize_keys.merge(format: :csv))
exit
params.symbolize_keys.merge(format: :csv)
exit
params[:export]
params
params[:title_text][:export]
exit
respond_to
format
exit
c
@headers["Generation Notes"]
@csv[1][33]
@csv[1]
@csv[1][@headers["Generation Notes"]]
@csv[1][@headers[k]]
@headers["Generation Notes"]
HEADERS_TO_ASSIGNER.keys
@headers.keys
@headers
column_index GENERATION_NOTES
GENERATION_NOTES
exit
HEADERS_TO_ASSIGNER
HEADERS_TO_ASSIGNER.keys
GENERATION_NOTES
HEADERS_TO_ASSIGNER.keys
exit
@csv[20][@headers["Catalog Key"]]
@csv[1][@headers["Catalog Key"]]
@csv[0][@headers["Catalog Key"]]
@headers["Catalog Key"]
@headers["Date Created"]
@headers["Generation Notes"]
GENERATION_NOTES
@headers[GENERATION_NOTES]
@headers.keys
exit
@csv[0][34]
column_index CATALOG_KEY
@headers[CATALOG_KEY]
c
CATALOG_KEY
@headers[CATALOG_KEY]
@headers
@csv[0]
c
exit
Thread.current.attributes
Thread.current
Thread.current[:current_username]
c
User.current_user_object.id
User.current_user_object
current_user
User.where(username: current_user).first
c
(@original.select{|p| !@checked.include?(p.id.to_s)}).collect{|p| p.iu_barcode}.join(', ')
(@original.select{|p| !@checked.include?(p.id)}).collect{|p| p.iu_barcode}.join(', ')
c
exit
@checked
(@original.select{|p| !@checked.include?(p.id)}).collect{|p| p.iu_barcode}.join(', ')
c
exit
@component_group.physical_objects
@original - @component_group.physical_objects
@original
flash[:notice]
c
flash[:notice]
exit
flash[:notice]
c
exit
params
exit
@component_group.id
@checked
c
@component_group.persisted?
exit
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
exit
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
params[:component_group][:component_group_physical_objects].keys
exit
keys.select{|k| !params[:component_group][:component_group_physical_objects][:component][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects][53005][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects]["53005"][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
@checked = keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes][k][:selected].nil?}
params
exit
params
exit
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
params[:component_group][:component_group_physical_objects]
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
