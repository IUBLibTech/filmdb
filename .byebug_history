exit
Thread.current.attributes
Thread.current
Thread.current[:current_username]
c
User.current_user_object.id
User.current_user_object
current_user
User.where(username: current_user).first
c
(@original.select{|p| !@checked.include?(p.id.to_s)}).collect{|p| p.iu_barcode}.join(', ')
(@original.select{|p| !@checked.include?(p.id)}).collect{|p| p.iu_barcode}.join(', ')
c
exit
@checked
(@original.select{|p| !@checked.include?(p.id)}).collect{|p| p.iu_barcode}.join(', ')
c
exit
@component_group.physical_objects
@original - @component_group.physical_objects
@original
flash[:notice]
c
flash[:notice]
exit
flash[:notice]
c
exit
params
exit
@component_group.id
@checked
c
@component_group.persisted?
exit
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
exit
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
params[:component_group][:component_group_physical_objects].keys
exit
keys.select{|k| !params[:component_group][:component_group_physical_objects][:component][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects][53005][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects]["53005"][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
@checked = keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes][k][:selected].nil?}
params
exit
params
exit
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
params[:component_group][:component_group_physical_objects]
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:selected].nil?}
exit
params[:component_group][:component_group_physical_objects]
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects][k][:checked].nil?}
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes][k][:checked].nil?}
params[:component_group][:component_group_physical_objects].keys
params[:component_group][:component_group_physical_objects].keys.select{|k| !params[:titles][t_id.to_s][:component_group][:component_group_physical_objects_attributes][k][:checked].nil?}
params[:component_group][:component_group_physical_objects]
exit
params
@component_group.component_group_physical_objects
n
exit
params
@component_group_physical_objects
@component_group
n
exit
@component_group
n
rails s
exit
Title.find(params[:component_group][:title_id])
Title.find(params[@component_group][:title_id])
params
Title.find(params[:title_id])
params
exit
params
exit
c
n
Title.find(params[:id])
params
c
params
exit
model_type.gsub('Title')
flash[:notice]
exit
cv
exit
cv
exit
params[:controlled_vocabulary][:model_attribute]
params[controlled_vocabulary][model_attribute]
params
exit
@map.to_json
@map.json
@map["Title"].keys
exit
@map["Title"].keys
@map["Title"]
@map.keys
exit
@map.keys
c
@map.keys
exit
c
exit
all_shelves_returned?
all_shelves_returned
exit
@physical_object.current_workflow_status.status_name
!@physical_object.cage_shelf.nil? && @physical_object.current_workflow_status.status_name != WorkflowStatus::TWO_K_FOUR_K_SHELVES
exit
c
@physical_object.errors
exit
c
exit
@master
@mergees.last.titles
@mergees.first.titles
@mergees
c
exit
@moved.collect{|p| [p.iu_barcode, p.current_location] }
@moved.collect{|p| [p.barcode, p.current_location] }
@moved
c
@return
exit
@physical_objects.offset((@page - 1) * PhysicalObject.per_page).limit(PhysicalObject.per_page).size
@physical_objects.size
c
@count > PhysicalObject.per_page
@count
exit
@cages.first.top_shelf.status
@cages.first.top_shelf.physical_objects.size
c
exit
@cages.first.top_shelf
exit
@cages.first.top_shelf
exit
@cages[4].top_shelf
@cages.[4].top_shelf
@cages.first.top_shelf
exit
c
@cages
exit
c
cs
cs.physical_objects
cd.physical_objects
cs
@cage_shelf.id
c
exit
c
cs.status
cs.physical_objects.size
exit
@cage_shelves[23].physical_objects
c
@cage_shelves[23].physical_objects.size
@cage_shelves.last.physical_objects.size
@cage_shelves.first.physical_objects.size
@cage_shelves.first
@cage_shelves.first.physical_objects
@cage_shelves
c
@cage_shelves.size
@cage_shelves
@cage_shelves.first
exit
@cage_shelves.first.physical_objects
c
CageShelf.all.includes([:physical_objects, :cage]).joins([:physical_objects, :cage]).order('cage_shelves.id DESC')
c
@old_count
c
@count
c
exit
keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes][k][:return].nil?}
keys.select{|k| params[:component_group][:component_group_physical_objects_attributes][k][:return].nil?}
keys
keys = params[:component_group][:component_group_physical_objects_attributes].keys
@return
@master.physical_objects.first.workflow_statuses.collect{|w| w.status_name}
@master.physical_objects.first.workflow_statuses
@master.physical_objects
@master
c
po.active_scan_settings
c
@component_group
po.active_component_group
settings
c
po.active_component_group
n
ws.status_name
es.status_name
c
po
@physical_object
c
@physical_object.saved?
c
n
WorkflowStatus.build_workflow_status(WorkflowStatus::JUST_INVENTORIED_WELLS, @physical_object)
c
exit
c
reload!
nil || 'foo'
self.const_get(:HUMANIZED_SYMBOLS)[attribute.tr(':','').to_sym]
exit
ControlledVocabulary.where("model_type like 'Title%'").pluck(:model_attribute).uniq
HUMANIZED_SYMBOLS
HUMANIZED_SYMBOLS[attribute.tr(':','').to_sym]
attribute.tr(':','').to_sym
attribute.to_sym
attribute
exit
attribute.tr(':', '')
self.const_get(:HUMANIZED_SYMBOLS)[attribute.tr(':', '')]
attribute
self.const_get(:HUMANIZED_SYMBOLS)[attribute]
self.const_get(:HUMANIZED_SYMBOLS)[attribute.to_sym]
exit
c
ControlledVocabulary.where("model_type like 'Title%'").pluck(:model_attribute).uniqc
ControlledVocabulary.where("model_type like 'Title%'").pluck(:model_attribute).uniq
ControlledVocabulary.where("model_type like 'Title%'").uniq
attribute
c
attribute
"foo".to_sym
attribute.tr(':','').to_sym
attribute.to_sym
attribute
exit
c
ws
cl
po.iu_barcode
c
