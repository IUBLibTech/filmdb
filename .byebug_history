c
@title.physical_objects.select{|p| (!WorkflowStatus.is_storage_status?(p.previous_location) && (p.current_location != p.previous_location))}
@title.physical_objects.collect{|p| [p.iu_barcode, p.previous_location, p.current_location]}
p
p.current_location
c
po.id
c
po.id
que ? WorkflowStatus::QUEUED_FOR_PULL_REQUEST : WorkflowStatus::BEST_COPY_MDPI_WELLS
que ? WorkflowStatus::QUEUED_FOR_PULL_REQUEST : WorkflowStatus::BEST_COPY_ALF
que
exit
c
iu_barcode
c
iu_barcode
id
c
active_scan_settings.nil? && component_group_id != nil
exit
po.component_group_physical_objects.collect{ |cgpo| cgpo.component_group_id}
po.component_group_physical_objects
po.active_component_group
po.active_scan_settings
exit
po.component_group_physical_objects.select{|ss| ss.component_group_id == po.active_component_group.id}exit
po.component_group_physical_objects.select{|ss| ss.component_group_id == po.active_component_group.id}
po.scan_settings.select{|ss| ss.component_group_id == po.active_component_group.id}
po.scan_settings.select{|ss| ss.component_group_id = po.active_component_group.id}
po.active_component_group
po.active_scan_settings
exit
e.message
e
n
c
checked
n
checked
c
failed
n
failed
c
failed.size
failed
exit
Title.where("id in (?)", params[:mergees].split(',').collect{ |s| s.to_i})
params[:mergees].split(',').collect{ |s| s.to_i}
params[:mergees]
params
exit
po.active_component_group.physical_objects.size
po.active_component_group.physical_objects
po.active_component_group
c
exit
checked
@component_group.physical_objects.size
@component_group.id
c
exit
c
exit
checked
@component_group.physical_objects.first.id
@component_group.physical_objects.size
@component_group.physical_objects
@component_group
PhysicalObject.find(checked[0]).titles_text
unchecked
checked
c
failed
c
status_name
po.current_location
po
exit
po.active_component_group
status_name
exit
e.message
exit
unchecked
checked
exit
unchecked
checked
exit
keys.select{|k| params[:component_group][:component_group_physical_objects_attributes][k][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes][k][:selected].nil?}
params[:component_group][:component_group_physical_objects_attributes]["103965"][:selected].nil?
params[:component_group][:component_group_physical_objects_attributes]["94162"][:selected].nil?
params[:component_group][:component_group_physical_objects_attributes]["94162"]
params[:component_group][:component_group_physical_objects_attributes]
keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes]["94162"][:selected].nil?}
keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes]["94162"][:checked].nil?}
params[:component_group][:component_group_physical_objects_attributes]
exit
params[:component_group][:component_group_physical_objects_attributes]["94162"]
exit
params[:component_group][:component_group_physical_objects_attributes]["94162"]
params[:component_group][:component_group_physical_objects_attributes]["94162"][:checked]
params[:component_group][:component_group_physical_objects_attributes].keys
checked
exit
params[:component_group]
params.keys
exit
params.keys
n
error
n
p.id
c
n
p
c
checked.size
c
unchecked
params[:component_group][:component_group_physical_objects_attributes][keys.first]
params[:component_group][:component_group_physical_objects_attributes]
keys.select{|k| params[:component_group][:component_group_physical_objects_attributes][k][:checked] == "true"}
checked
exit
params[:component_group][:component_group_physical_objects_attributes]["218"]
params[:component_group][:component_group_physical_objects_attributes].keys
params[:component_group][:component_group_physical_objects_attributes]
params[:component_group][:component_group_physical_objects].keys
params[:component_group_physical_objects]
params[:component_group_physical_objects].size
params
c
params
exit
params
exit
@component_group
component_group_params
params
c
p.active_component_group
c
p.id
p.current_scan_settings
c
n
p.current_scan_settings.scan_resolution
p.current_scan_settings
p.component_group_physical_objects.where(component_group_id: 38).first
p.component_group_physical_objects
p.active_component_group
c
component_groups.include?(component_group)
c
component_groups.include?(component_group)
c
component_groups.include?(component_group)
c
component_groups.include?(component_group)
c
component_group_physical_objects.where(component_group_id: component_group.id).first
component_groups.include?(component_group)
exit
p.scan_settings(@component_group)
p.scan_settings
exit
p.component_group_physical_objects.where(component_group_id: @component_group.id)
p.component_group_physical_objects
p
@physical_object
@component_group
p.scan_settings(@component_group)
p.scan_settings
c
cgpo.object
object
cgpo.class
cgpo
c
@component_group
@component_group.class
c
params
c
exit
params
params[:id]
@component_group.title
c
cg.update_attributes(scan_resolution: '2k')
cg.class
cg
exit
@cage.bottom_shelf.identifier
cage.bottom_shelf.identifier
c
set[:start_date][:approximation] = (dates[0][0] == '[' && dates[0][-1] == ']')
set[:start_date]
(dates[0][0] == '[' && dates[0][-1] == ']')
dates
c
n
set[:start_date]
set
set[:start_date][:approximation] = (dates[0][0] == '[' && dates[0][-1] == ']')
set[:start_date]
'[' && dates[0][-1] == ']'
dates[0][0]
exit
dates
c
year[-1]
year
n
match
n
dates
c
@title.title_dates.first
c
date_set[:end_date].nil?
self
n
date_set
exit
JSON.pretty_generate @pp
JSON.pretty_generate(PodPush.find(params[:id]).response)
@pp.class
c
Title.includes(:physical_object_titles).where(physical_object_titles: {title_id: nil}).size
Title.all.size
n
(@unit || @collection || @startTime || @endTime) |= nil
@unit || @collection || @startTime || @endTime
any_filters?
exit
po
exit
@headers['Series Part']
c
ControlledVocabulary.new(model_type: 'ComponentGroup', model_attribute: ':group_type', value: val, active_status: true, menu_index: i + 3)
ControlledVocabulary.first.active_status
c
loc
c
@cg.group_type
c
exit
@cg.group_type
loc
c
prev_cg
