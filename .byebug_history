exit
(cg.title.physical_objects.to_a - cg.physical_objects.to_a).collect{|p| p.id}
cg.physical_objects.collect{|p| p.id}
cg.title.physical_objects.collect{|p| p.id}
(cg.title.physical_objects.to_a - cg.physical_objects.to_a).collect{|p| p.id}
cg.title.physical_objects.to_a - cg.physical_objects.to_a
cg.physical_objects.collect{|p| p.id}
cg.title.physical_objects.collect{|p| p.id}
exit
Title.first.title_publishers.to_a
PhysicalObject.first.dates.to_a
stored.collect{|p| p.id}
cg.title.physical_objects.size
cg.title.physical_objects
stored.collect{|p| p.id}
c
stored.collect{|p| p.id}
stored
c
n
exit
session
c
FREEZER_AD_STRIP_VALS.include?(ad_strip)
FREEZER_AD_STRIP_VALS
exit
FREEZER_AD_STRIP_VALS
stats
exit
po
status_name
c
@title.id
other_title
title
@map
c
@map
params[:map]
params[:map].keys
params[:map]
@title.id
title.id
c
@title.id
title.id
title
p
c
po.storage_location
po
p.storage_location
storage_location
c
po.active_component_group
c
po.active_component_group
c
po.active_component_group
c
p.active_component_group
c
po.current_location
status_name
c
po
next
po
exit
xeit
po
next
params
c
params
self
this
stats.first
stats
exit
@map[title].keys
@map[title]
c
@map
c
@cg.group_type == ComponentGroup::BEST_COPY_ALF
@cg.group_type == WorkflowStatus::BEST_COPY_ALF
exit
WorkflowStatus::BEST_COPY_ALF
@cg.group_type == WorkflowStatus::BEST_COPY_ALF
@cg.group_type
exit
@cg.group_type
loc
c
@scan_resolutions
exit
c
@can_sizes
can_sizes
exit
@can_sizes
exit
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
PhysicalObject.all.collect{|p| p.current_location}
exit
PhysicalObject.all.collect{|p| p.current_location}
c
PhysicalObject.all.collect{|p| p.current_location}
exit
params[:physical_object][:location]
params
c
status_name
c
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
p.current_workflow_status.status_name
c
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
p.current_workflow_status.status_name
c
p.current_workflow_status.status_name
WorkflowStatus::STATUS_TYPES_TO_STATUSES['Storage'].include?(p.current_workflow_status.status_name)
c
Title.find(1)
ComponentGroup.first.title_id
ComponentGroup.first
PhysicalObject.all.collect{ |p| p.component_group_id }
@physical_objects.size
@physical_objects
PhysicalObject.last.active_component_group
PhysicalObject.first.active_component_group
c
exit
PhysicalObject.first.active_component_group
Title.first.physical_objects.collect{|p| p.current_workflow_status.status_name}
c
@cg
c
Title.first.physical_objects.collect{|p| p.current_workflow_status.status_name}
Title.first.physical_objects.collect{|p| p.location}
Title.first.physical_objects.collect{|p| p.current_workflow_status}
Title.first.title_text
Title.all.size
exit
Title.all.size
c
Title.find(400)
@master
c
if false x = 23 end
any_in_work_flow
if any_in_work_flow puts 'yes' end
if any_in_work_flow
c
any_in_work_flow
c
any_in_work_flow
c
any_in_work_flow
p.active_component_group.nil?
c
any_in_work_flow
c
@physical_objects
n
params
c
exit
params[:exclude].class
params[:exclude]
JSON.parse(params[:exclude])
params[:exclude]
c
status = status.flatten
c
status.flatten
c
status
c
status
c
*status
status
c
status
c
status
c
action_name
c
action_name
c
reload!
cs.status_name != WorkflowStatus::JUST_INVENTORIED_WELLS
(!cs.nil? && !WorkflowStatus.is_storage_status?(cs.status_name)) &&(cs.status_name != WorkflowStatus::JUST_INVENTORIED_ALF || cs.status_name != WorkflowStatus::JUST_INVENTORIED_WELLS)
cs.status_name
cs.status_name != WorkflowStatus::JUST_INVENTORIED_WELLS
c
flash.now[:warning]
flash[:warning]
flash[:warning] ? 'true' : 'false'
c
flash[:warning] ? flash[:warning] : flash.now[:warning]
flash[:warning] ? 'true' : 'false'
flash.now[:warning]
flash[:warning]
c
flash[:warning]
c
flash[:warning].html_safe
flash[:warning]
c
failed.size
failed
c
workflow_type_from_status(status_name)
c
workflow_type_from_status(status_name)
exit
status_name
workflow_type_from_status(status_name)
c
WorkflowStatus.is_storage_status?(p.current_workflow_status)
p.current_workflow_status
p
c
physical_objects[0].current_workflow_status
physical_objects.any?{|p| p.titles_text.size > 0 }
physical_objects.any?
physical_objects
p
p.current_workflow_status
c
params
c
PhysicalObject.last.storage_location
reload!
current_workflow_status == WorkflowStatus::JUST_INVENTORIED_WELLS
current_workflow_status
current_workflow_status == WorkflowStatus::JUST_INVENTORIED_WELLS
WorkflowStatus::JUST_INVENTORIED_WELLS
current_workflow_status
current_workflow_status == WorkflowStatus::JUST_INVENTORIED_WELLS || current_workflow_status == WorkflowStatus::JUST_INVENTORIED_ALF
WorkflowStatus.where(physical_object_id: id, status_name: WorkflowStatus::IN_STORAGE_INGESTED).size > 0
c
sf
c
row[column_index STOCK]
c
row[column_index STOCK]
c
column_index STOCK
row[column_index STOCK]
c
row[column_index STOCK]
