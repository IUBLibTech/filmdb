exit
exiy
po.shrinkage
po.send(:shrinkage=, shrink.to_f)
shrink.to_f
shrink
c
pos.size
exit
params[:pos][:po_ids].split(',')
params[:pos][:po_ids]
po_ids
pos
exit
cg
c
bad
exit
pos.collect { |p| p.title_id }
pos
bad
c
format.attributes
format.type
format
c
format
C
format
c
format
c
format
c
exit
@spreadsheet
exit
c
po.item_original_identiier
row[@headers[k]]
@headers[k]
c
row[@headers[k]]
@headers[k]
po.item_original_identiier
po
physical_object
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
c
HEADERS_TO_ASSIGNER[k]
exit
color_field
bw_field
exit
cc
c
cf
bw_field
bw_field.to_sym
bw_field_to_sym
exit
val_conditions
val_conditions.keys
matcher[1]
matcher
cf
c
exit
u.created_in_spreadsheet
u.created_in_spreadsheet = @spreadsheet
u.created_in_spreadsheet = @spreadsheet.id
u = User.new
User.new.created_in_spreadsheet.class
User.new(username: username, email_address: email, first_name: name.split(' ')[0], last_name: name.split(' ')[1], active: false, created_in_spreadsheet: @spreadsheet.id)
user
c
user
c
email && name
email
name
c
column_index RESEARCH_VALUE
c
existing_series
params[:physical_object][:series_id].blank?
Series.find(params[:physical_object][:series_id])
params[:physical_object][:series_id]
c
json
c
Series.where(spreadsheet_id: 5).group(:title).count
Spreadsheet.all.pluck(:id)
Spreadsheet.all.pluck[:id]
Series.series_count_not_in_spreadsheet(@series_titles, @spreadsheet.id)
@series_titles = Spreadsheet.distinct_series(@spreadsheet.id)
@series_titles
Series.series_count_not_in_spreadsheet(@series_titles, @spreadsheet.id)
Spreadsheet.distinct_series(@spreadsheet.id)
c
another.class == self.class && self.role == another.role && self.name == another.name
another
c
@master_title.title_creators.include? tc
c
@master_title.title_creators.include? tp
@master_title.title_creators.include? tc
n
@master_title.title_creators.include? tc
n
@master_title.title_creators.include? tc
n
@master_title.title_creators.include? tc
n
@master_title.title_creators.include? tc
n
@master_title.title_creators.include? tc
tc
@master_title.title_creators
exit
COLUMN_HEADERS[2]
COLUMN_HEADERS[1]
COLUMN_HEADERS[0]
COLUMN_HEADERS[55]
COLUMN_HEADERS[56]
COLUMN_HEADERS[57]
COLUMN_HEADERS[58]
COLUMN_HEADERS
exit
row
COLUMN_HEADERS[TITLE]
COLUMN_HEADERS[DATE_CREATED]
COLUMN_HEADERS
@column_headers
column_headers
DATE_CREATED
@headers
column_index DATE_CREATED
DATE_CREATED
row[column_index DATE_CREATED]
exit
row[column_index DATE_CREATED]
c
@headers.keys.include?('Silent?')
@headers.keys
ch
exit
ch
exit
params[:selected].split('')
exit
Title.where('title_text = ? AND (spreadsheet_id != ? OR spreadsheet_id IS NULL)', params[:title], @spreadsheet.id).size
Title.where('title_text = ? AND (spreadsheet_id != ? OR spreadsheet_id IS NULL)', params[:title], @spreadsheet.id).each do |t| puts t.spreadsheet_id end
Title.where('title_text = ? AND (spreadsheet_id != ? OR spreadsheet_id IS NULL)', params[:title], @spreadsheet.id)
c
exit
cv[:condition_rating][matcher[2].to_i - 1][0]
cv[:condition_rating][matcher[2].to_i - 1]
exit
options_for_select(@cv[:condition_rating], vc.object.value)
vc.object.value
exit
c
cv[:condition_type][matcher[2].to_i - 1][0]
cv[:condition_type][matcher[2].to_i - 1]
matcher[1]
val_conditions
exit
c
bool_conditions
cf
c
cf
c
cf
c
cf
c
cf
c
cf
c
cf
c
cf
c
cf
c
cf
c
sound
@cv[:sound].collect { |x| x[0] }
c
params[:physical_object][:value_conditions_attributes]
c
params[:physical_object][:value_conditions_attributes]
params[:physical_object][:value_condition_attributes]
params[:value_condition_attributes]
params
c
exit
controller.class == TitlesController
controller.class
controller
controller == TitlesController
controller == CollectionsController
c
controller.class
controller.name
controller
controller_name
exit
@form_cv
c
@title_form_cv
@title_form_cv[:form]
c
@title_genre_cv
@title_genre_cv.include
c
title.title_creators
title.title_dates
c
title.title_creators
c
val
c
cf
