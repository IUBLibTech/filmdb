c
exit
keys.select{|k| !params[:component_group][:component_group_physical_objects_attributes][k][:return].nil?}
keys.select{|k| params[:component_group][:component_group_physical_objects_attributes][k][:return].nil?}
keys
keys = params[:component_group][:component_group_physical_objects_attributes].keys
@return
@master.physical_objects.first.workflow_statuses.collect{|w| w.status_name}
@master.physical_objects.first.workflow_statuses
@master.physical_objects
@master
c
po.active_scan_settings
c
@component_group
po.active_component_group
settings
c
po.active_component_group
n
ws.status_name
es.status_name
c
po
@physical_object
c
@physical_object.saved?
c
n
WorkflowStatus.build_workflow_status(WorkflowStatus::JUST_INVENTORIED_WELLS, @physical_object)
c
exit
c
reload!
nil || 'foo'
self.const_get(:HUMANIZED_SYMBOLS)[attribute.tr(':','').to_sym]
exit
ControlledVocabulary.where("model_type like 'Title%'").pluck(:model_attribute).uniq
HUMANIZED_SYMBOLS
HUMANIZED_SYMBOLS[attribute.tr(':','').to_sym]
attribute.tr(':','').to_sym
attribute.to_sym
attribute
exit
attribute.tr(':', '')
self.const_get(:HUMANIZED_SYMBOLS)[attribute.tr(':', '')]
attribute
self.const_get(:HUMANIZED_SYMBOLS)[attribute]
self.const_get(:HUMANIZED_SYMBOLS)[attribute.to_sym]
exit
c
ControlledVocabulary.where("model_type like 'Title%'").pluck(:model_attribute).uniqc
ControlledVocabulary.where("model_type like 'Title%'").pluck(:model_attribute).uniq
ControlledVocabulary.where("model_type like 'Title%'").uniq
attribute
c
attribute
"foo".to_sym
attribute.tr(':','').to_sym
attribute.to_sym
attribute
exit
c
ws
cl
po.iu_barcode
c
ws
cl
po.iu_barcode
c
ws
cl
po.iu_barcode
c
ws.status_name
cl
po.iu_barcode
c
po.current_location
cl
po.iu_barcode
po.current_location
c
po.current_location
cl
po.iu_barcode
c
n
po.current_location
cl
po.iu_barcode
c
po.previous_location
po.current_workflow_status == ws
ws
ws.id
ws.status_name
c
ws
ws.status_name
po.current_location
cl
CL
po.iu_barcode
C
exit
po.previous_location
po.workflow_statuses.collect{|w| w.status_name}
po.worflow_statuses.collect{|w| w.status_name}
po.current_location
po.iu_barcode
c
ws.status_name
cl
po.iu_barcode
cl
c
ws.status_name
cl
po.iu_barcode
c
ws.status_name
component_group.group_type
cl
po.iu_barcode
cl
c
cl
exit
po.iu_barcode
exit
po.current_location
po.iu_barcode
c
component_group.group_type
po.iu_barcode
po.current_workflow_status.in_workflow? || po.current_workflow_status.is_storage_status?
po.current_location
c
ComponentGroup::BEST_COPY_ALF
component_group.group_type
po.current_location
po.iu_barcode
po.id
c
@return
@checked
c
n
@return
@checked
n
@title.id
@checked
@return
exit
@return
c
root_path
c
@unchecked
exit
PhysicalObject.where(iu_barcode: 30000136917683).first.id
@unchecked = keys.select{|k| !params[:titles]["12995"][:component_group][:component_group_physical_objects_attributes][k][:return].nil?}
keys
keys = params[:titles]["12995"][:component_group][:component_group_physical_objects_attributes].keys
params[:titles]["12995"][:component_group][:component_group_physical_objects_attributes]
params[:titles]["12995"][:component_group][:component_group_physical_object_attributes]
params[:titles]["12995"][:component_group].keys
params[:titles]["12995"][:component_group]
params[:titles]["12995"]
params[:titles].keys
params[:titles]
exit
params[:titles]['12995']
params[:titles][12995]
params[:titles].keys
params[:titles]
params[titles]
params.keys
c
exit
cur_title.physical_objects.find {|p| p == pid.to_i }
cur_title.physical_objects.collect{|p| p.id}
pid
c
@retitled[21830][:moved]
@retitled.keys
@retitled
exit
pid
po
c
<<<<<<< HEAD
PhysicalObject.find(15495).current_location
params[:title_map]
exit
p.component_group_physical_objects.first
p.component_group_physical_objects.last
p.component_group_physical_objects.size
p.component_group_physical_objects
p.active_component_group
p.active_scan_settings
@new_cg.id
p.active_scan_settings
n
params[:titles][t_id.to_s][:component_group][:component_group_physical_objects_attributes][p.id.to_s]
@retitled[t_id][:moved]
n
ws.status_name == p.current_location
n
p
exit
params[:titles][@title.id.to_s][:component_group][:component_group_physical_objects_attributes].keys.include?(p.id.to_s)
ws
n
@checked.include?(p.id.to_s)
p
exit
p
pos
p
@checked.include?(p.id.to_s)
c
pos.collect{|p| p.id.to_s} == @checked
pos.collect{|p| p.id.to_s}
pos.size
@new_cg
@unchecked
@checked
@retitled[t_id]
t_id
c
@map
exit
c
@map
params[:title_map]
params.keys
c
@retitled[12670][:moved][0].active_component_group
@retitled[12670][:moved][0].current_location
@retitled[12670][:moved][0].previous_location
@retitled[12670][:moved]
@retitled.keys
@retitled
c
options_for_select(ComponentGroup::CLEAN.collect{|s| [s, s]}, (ss.clean if ss))
options_for_select(ComponentGroup::SCAN_RESOLUTIONS.collect{|s| [s, s]}, (ss.scan_resolution if ss))
p.humanize_boolean_fields(PhysicalObject::GENERATION_FIELDS)
c
options_for_select(ComponentGroup::SCAN_RESOLUTIONS.collect{|s| [s, s]}, p.active_scan_settings.scan_resolution)
p.active_scan_settings
c
p.component_group_physical_objects.where(component_group_id: p.active_component_group.id)
