c
params[:medium_changed]
params
exit
@physical_object.base_nitrate
@physical_object.medium.base_nitrate
@physical_object.is_a?(Film)
@physical_object
c
n
@physical_object
exit
n
params
c
@physical_object
c
params
n
c
params
n
params[original]
params[medium]
params[:film]
medium
params
params[:original]
params[:medium]
n
medium
original
n
params
exit
params
exit
params
exit
params
exit
params
params = params.except(:video)
params[:video]
params
params.except(:video)
params.keys
params
n
medium
n
original
n
params[:medium_changed]
params
exit
params
exit
params
c
exit
params
c
params[:film][:alternative_title]
params[:film][:alternative_title
params[:film]
params
n
params
c
n
params
c
exit
c
params
exit
params
exit
params
c
params
c
params
c
@physical_object
c
@physical_object
c
params
exit
COLUMN_HEADERS
TITLE
COLUMN_HEADERS[TITLE]
@headers
c
exit
row
exit
@headers
@csv[0]
@csv
exit
medium
exit
medium_index
exit
medium
c
Socket.gethostname
exit
count
exit
cl.where(bf => true).joins("INNER JOIN physical_objects ON physical_objects.actable_id = #{cl.to_s.downcase.pluralize}.id").where(po_sql_where)
bf
po_sql_where
count
c
cl.where(generation_b_roll: true)
cl.where( true)
cl::GENERATION_FIELDS
cl
exit
c
exit
params
c
params
exit
params.to_json
c
params.to_json
params
params.nil?
c
@url
c
exit
action_name
@url
physical_object_path(@physical_object.acting_as.id)
@physical_object.acting_as.id
@physical_object.acting_as
@physical_object.acting_as.id
@url
c
@method
@url
c
new_physical_object_path
new_physical_objects_path
physical_objects_path
action_name
c
url
c
@physical_object.titles_text
@physical_object.current_location
@physical_object.current_location == WorkflowStatus::MOLD_ABATEMENT
@physical_object.specific.has_attribute?(:mold)
@physical_object.specific.
@physical_object
c
@physical_object.acting_as.save
params
@physical_object.acting_as.actable_type
@physical_object.acting_as
@physical_object
exit
params[:medium_changed]
exit
c
@physical_object.alternative_title
exit
PO_ONLY_ATTRIBTUES.include?(p.parameterize.to_sym)
p
PO_ONLY_ATTRIBTUES.include?(p)
c
PO_ONLY_ATTRIBTUES.include?(p)
@physical_object.send(p+"=", params[class_sym][p])
@physical_object.send(p.underscore.parameterize.to_sym, params[class_sym][p])
@physical_object[:titles_text]
@physical_object.titles_text
@physical_object
@physical_object.titles
@physical_object
@physical_object[:title_text]
@physical_object[p]
p
c
new_po.class
exit
class_sym
new_po.class
exit
new_po
params[:medium_changed]
exit
params[:video][:alternative_title]
@physical_object.alternative_title
exit
hash
c
hashc
hash.permit
hash
n
hash
exit
hash
n
exit
clear
eexit
medium
params
c
exit
hash.permit
hash.permitted= true
hash.permitted?
hash.permitted
hash
c
hash
exit
hash
hahs
h = params.clone
params
h = params.clone
params.clone
hash
c
exit
form_for @physical_object
po_only_params
@physical_object
new_po.iu_barcode
n
new_po.iu_barcode
new_po
exit
:one_word.to_s.capitalize
medium.to_s.capitalize
medium.to_s.upcase
medium.to_s
medium
new_po
exit
@physical_object
params[:medium_changed]
params
c
params
c
