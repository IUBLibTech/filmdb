c
NONPACKABLE_GAUAGES.include?(@physical_object.gauge)
exit
c
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT["16mm"]
exit
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT["16mm"]
PhysicalObjectsHelper.reload
PhysicalObjectsHelper.reload!
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT["16mm"]
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT[p.gauge.to_s]
PhysicalObjectsHelper::GAUGES_TO_FRAMES_PER_FOOT[p.gauge]
p.gauge
c
p.current_workflow_status.component_group
c
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include?(status_name) ? nil : physical_object.active_component_group.id
exit
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include? status_name ? nil : physical_object.active_component_group.id
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include? status_name
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include?(status_name) ? nil : physical_object.active_component_group.id
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include? status_name
status_name
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include? status_name ? nil : physical_object.active_component_group.id
(STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include? status_name ? nil : physical_object.active_component_group.id)
((STATUS_TYPES_TO_STATUSES['Storage'] << DEACCESSIONED).include? status_name ? nil : physical_object.active_component_group.id))
c
ws
w
c
physical_object.active_component_group
physical_object
p
c
p.active_component_group
exit
ControlledVocabulary.physical_object_cv
ControlledVocabulary
@cv[attr_symbol]
attr_symbol
val
exit
Series.series_not_in_spreadsheet(params[:series].to_i, @spreadsheet)
Series.series_in_spreadsheet(Series.find(params[:series].to_i).title, @spreadsheet.id).size
Series.series_in_spreadsheet(Series.find(params[:series].to_i).title, @spreadsheet.id)
Series.find(params[:series].to_i).title
exit
Series.find(params[:series].to_i).title
params[:series].to_i
eries.find(params[:series].to_i).title
eries.find(params[:series]).title
params[:series]
exit
ComponentGroup.new
cg
c
exit
cg
exit
cg.foobar = 'wtf?'
ComponentGroup.last
cg.reload
cg.reload!
cg.save
cg
c
@physical_object.footage.blank? && params[:physical_object][:footage].blank? && @physical_object.active_component_group.group_type != ComponentGroup::BEST_COPY_ALF
WorkflowStatus::BEST_COPY_ALF
exit
WorkflowStatus::BEST_COPY_ALF
c
WorkflowStatus::BEST_COPY_ALF
@physical_object.active_component_group.group_type
@physical_object.active_component_group.group_type != WorkflowStatus::BEST_COPY_ALF
@physical_object.footage.blank? && params[:physical_object][:footage].blank? && @physical_object.active_component_group.group_type != WorkflowStatus::BEST_COPY_ALF
c
WorkflowStatus::BEST_COPY_ALF
@physical_object.active_component_group.group_type
@physical_object.active_component_group.group_type != WorkflowStatus::BEST_COPY_ALF
@physical_object.footage.blank? && params[:physical_object][:footage].blank?
@physical_object.footage.blank? && params[:physical_object][:footage].blank? && @physical_object.active_component_group.group_type != WorkflowStatus::BEST_COPY_ALF
exit
c
@user
c
@user
c
@user
c
@user
c
WorkflowStatus::STATUSES_TO_NEXT_WORKFLOW[@physical_object.current_workflow_status.previous_sibling.status_name].collect{ |s| [s,s] }c
WorkflowStatus::STATUSES_TO_NEXT_WORKFLOW[@physical_object.current_workflow_status.previous_sibling.status_name].collect{ |s| [s,s] }
WorkflowStatus::STATUSES_TO_NEXT_WORKFLOW[@physical_object.current_workflow_status.previous_sibling.status_name]
@physical_object.current_workflow_status.previous_sibling.status_name
c
@physical_object.current_workflow_status.previous_sibling
c
@physical_object
params
exit
po.iu_barcode
medium
row
media_type
c
body
c
body
exit
c
lf
@l_cv[:language_type][0][0]
exit
self.class
self
@physical_object.active_component_group.physical_objects
c
@physical_object.current_workflow_status
c
@physical_objects.size
@physical_objects
c
result.class
result.status
result
exit
c
@physical_object.current_workflow_status.status_name == WorkflowStatus::MOLD_ABATEMENT
@physical_object.in_transit_from_storage?
c
!@series && !params[:title][:series_title_text].blank?
@series
@tp
c
!@title.series.nil? && @params[:series_text].blank?
exit
title_params
c
cedar['upload_dir']
exit
c
PhysicalObject.where(id: po_ids).first.iu_barcode
PhysicalObject.where(id: po_ids).size
PhysicalObject.where(id: po_ids)
po_ids
pod_ids
exit
@user.updated_at + SessionsHelper::TIME_OUT < Time.now
c
@user.updated_at + SessionsHelper::TIME_OUT < Time.now
c
session[:return_to]
request.fullpath
c
request.fullpath
c
@wells
@alf
c
u.worksite_location == 'ALF'
u.worksite_location
c
@user.worksite_location.blank?
@user.worksite_location.blank
@user
c
User.where(username: session[:username]).first.works_in_both_locations?
User.where(username: session[:username]).first.works_in_both_locations
exit
c
@physical_object.active_component_group.scan_resolution
exit
c
exit
!po_ids.include?(p.id.to_s)
!po_ids.include?(p.id)
p.id
po_ids
exit
@returned.size
@return.size
c
@cg_pos[0].workflow_statuses.last
@cg_pos
@cg_pos.size
@component_group.physical_objects.size
@component_group.physical_objects
@component_group.group_type
@component_group.group_typ
@component_group.type
po_ids.include? po_ids.first
@pos.size
@returned.size
@returned
c
@cg_pos
c
@pos.size
@pos
po_ids
c
current.status_name
current
status_name
(!current.nil? && !current.valid_next_workflow?(status_name))
(current.nil? && !SPREADSHEET_START_LOCATIONS.include?(status_name))
((current.nil? && !SPREADSHEET_START_LOCATIONS.include?(status_name))
exit
!@physical_object.current_workflow_status.status_name == WorkflowStatus::MOLD_ABATEMENT
!@physical_object.current_workflow_status.status_name != WorkflowStatus::MOLD_ABATEMENT
!@physical_object.in_transit_from_storage?
!@physical_object.in_transit_from_storage? && !@physical_object.current_workflow_status.status_name != WorkflowStatus::MOLD_ABATEMENT
c
po.send((sym.to_s << "=").to_sym, true)
(sym.to_s << "=").to_sym
exit
po.send(sym, true)
sym
exit
field
c
field.to_sym
PhysicalObject::GENERATION_FIELDS
PhysicalObject::GENERATION_FIELDS.include?(field.to_sym)
exit
@cv[:overall_condition_rating].collect { |x| x[0] }
c
cf.downcase
bool_conditions
bool_conditions.include?(cf.downcase)
exit
langs
lf
@l_cv[:language][index][0]
exit
cv[:rated_condition_rating]
val_conditions.include?(matcher[1].downcase)
cf
cv[:rated_condition_rating][matcher[2].to_i - 1][0]
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
c
ValueCondition.new(condition_type: matcher[1].titleize, value: cv[:rated_condition_rating][matcher[2].to_i - 1][0], physical_object_id: po.id)
cv[:rated_condition_rating][matcher[2].to_i - 1][0]
value: cv[:rated_condition_rating][matcher[2].to_i - 1][0
matcher && val_conditions.include?(matcher[1].downcase)
matcher[1]
c
show_worksite_location_url
