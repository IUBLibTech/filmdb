c
@unchecked
exit
PhysicalObject.where(iu_barcode: 30000136917683).first.id
@unchecked = keys.select{|k| !params[:titles]["12995"][:component_group][:component_group_physical_objects_attributes][k][:return].nil?}
keys
keys = params[:titles]["12995"][:component_group][:component_group_physical_objects_attributes].keys
params[:titles]["12995"][:component_group][:component_group_physical_objects_attributes]
params[:titles]["12995"][:component_group][:component_group_physical_object_attributes]
params[:titles]["12995"][:component_group].keys
params[:titles]["12995"][:component_group]
params[:titles]["12995"]
params[:titles].keys
params[:titles]
exit
params[:titles]['12995']
params[:titles][12995]
params[:titles].keys
params[:titles]
params[titles]
params.keys
c
exit
cur_title.physical_objects.find {|p| p == pid.to_i }
cur_title.physical_objects.collect{|p| p.id}
pid
c
@retitled[21830][:moved]
@retitled.keys
@retitled
exit
pid
po
c
<<<<<<< HEAD
PhysicalObject.find(15495).current_location
params[:title_map]
exit
p.component_group_physical_objects.first
p.component_group_physical_objects.last
p.component_group_physical_objects.size
p.component_group_physical_objects
p.active_component_group
p.active_scan_settings
@new_cg.id
p.active_scan_settings
n
params[:titles][t_id.to_s][:component_group][:component_group_physical_objects_attributes][p.id.to_s]
@retitled[t_id][:moved]
n
ws.status_name == p.current_location
n
p
exit
params[:titles][@title.id.to_s][:component_group][:component_group_physical_objects_attributes].keys.include?(p.id.to_s)
ws
n
@checked.include?(p.id.to_s)
p
exit
p
pos
p
@checked.include?(p.id.to_s)
c
pos.collect{|p| p.id.to_s} == @checked
pos.collect{|p| p.id.to_s}
pos.size
@new_cg
@unchecked
@checked
@retitled[t_id]
t_id
c
@map
exit
c
@map
params[:title_map]
params.keys
c
@retitled[12670][:moved][0].active_component_group
@retitled[12670][:moved][0].current_location
@retitled[12670][:moved][0].previous_location
@retitled[12670][:moved]
@retitled.keys
@retitled
c
options_for_select(ComponentGroup::CLEAN.collect{|s| [s, s]}, (ss.clean if ss))
options_for_select(ComponentGroup::SCAN_RESOLUTIONS.collect{|s| [s, s]}, (ss.scan_resolution if ss))
p.humanize_boolean_fields(PhysicalObject::GENERATION_FIELDS)
c
options_for_select(ComponentGroup::SCAN_RESOLUTIONS.collect{|s| [s, s]}, p.active_scan_settings.scan_resolution)
p.active_scan_settings
c
p.component_group_physical_objects.where(component_group_id: p.active_component_group.id)
c
p.active_component_group
p.component_group_physical_objects.where(component_group_id: p.active_component_group.id)
p.physical_object_component_groups
p.physical_object_component_groups.where(component_group_id: p.active_component_group.id)
p.active_component_group
p.active_scan_settings
exit
@map
params[:title_map]
@retitled[12670].size
@retitled.keys
exit
exiyt
@checked
c
pos.collect{|p| p.iu_barcode}
pos
pos.colect{|p| p.iu_barcode}
pos.size
@new_cg
@retitled
t_id
@title.id
c
@retitled.keys
exit
@retitled.keys
@retitled
c
exit
params[:titles][t_id.to_s][:component_group][:group_type]
c
n
t_id
c
pos.collect{|p| p.id}
keys.select{|k| !params[:titles][t_id.to_s][:component_group][:component_group_physical_objects_attributes][k][:checked].nil?}
pos
keys.select{|k| !params[:titles][t_id.to_s][:component_group][:component_group_physical_objects_attributes][k][:checked].nil?}
n
params[:titles][t_id.to_s][:component_group][:component_group_physical_objects_attributes].keys
exit
params[:titles][t_id.to_s]
t_id
params[:titles].keys
params[:titles][t_id]
params[:titles]
params
params[:titles][t_id]
c
@map
exit
params[:titles]
h = {}
h = Hash.new
@map
c
@map.to_h
c
@map.to_h
c
@map.to_h
@map
c
=======
p.id
p.component_group_physical_objects.where(component_group_id: p.active_component_group.id).size
p.component_group_physical_objects.where(component_group_id: p.active_component_group.id)
p.component_group_physical_objects.where(component_group.id: p.active_component_group.id)
p.active_component_group
c
p.id
p
>>>>>>> 0.43.4
physical_objects.first.waiting_active_component_group_members?exit
physical_objects.first.waiting_active_component_group_members?
c
(@count / Title.per_page.to_f).ceil
c
(@count / Title.per_page).to_f.ceil
exit
x
x = 100.0
(@count / Title.per_page)
(@count / Title.per_page).to_f.ceil
exit
(@count / Title.per_page)
(@count / Title.per_page).to_f
@count.to_f
Title.per_page.class
Title.per_page
exit
Title.per_page
@count / Title.per_page
(@count / Title.per_page).ceil
c
exit
@count / 100.0
@count / Title.per_page
@count
(@count / Title.per_page).ceil
c
@count
c
p.active_scan_settings
ComponentGroup.find(7127).title.summary
ComponentGroup.find(7127).title.title_summary
ComponentGroup.find(7127).title.title_text
ComponentGroup.find(7127)
p.active_component_group
c
p.active_component_group
p.active_component_group.title
p.active_component_group
c
p.active_component_group?
p.active_component_group
p
exit
@title.physical_objects.first.current_location
@title.physical_objects.select{|p| (!WorkflowStatus.is_storage_status?(p.previous_location) && (p.current_location != p.previous_location))}.size
@title.physical_objects.select{|p| (!WorkflowStatus.is_storage_status?(p.previous_location) && (p.current_location != p.previous_location))}
c
map
c
map
exit
JSON.parse(params[:title_map])
JSON.parse(title_map)
c
exit
JSON.parse(params[:title_map])
JSON.parse(params[:title_map]
c
exit
c
params
c
exit
flash[:merged]
flash[:merged][:all]
c
flash[:merge][:all]
flash[:merge]
c
exit
Title.find(params[:id])
params[:id]
exit
params[:merge_all] == 'true'
params[:merge_all] == 'false'
@title.in_active_workflow?
@title
c
params
exit
tempTblSql
exit
tempTblSql
