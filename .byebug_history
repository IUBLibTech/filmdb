exit
controller.class == TitlesController
controller.class
controller
controller == TitlesController
controller == CollectionsController
c
controller.class
controller.name
controller
controller_name
exit
@form_cv
c
@title_form_cv
@title_form_cv[:form]
c
@title_genre_cv
@title_genre_cv.include
c
title.title_creators
title.title_dates
c
title.title_creators
c
val
c
cf
exit
cf
c
cf
c
cf
PhysicalObject::CONDITION_BOOLEAN_FIELDS
c
cv[:condition_type][matcher[2].to_i - 1][1]
c
n
cv[:condition_type][matcher[2].to_i - 1][1]
exit
cv[:condition_rating][matcher[2].to_i - 1][1]
PhysicalObject::CONDITION_FIELDS.include?(matcher[1].parameterize.underscore.to_sym)
matcher[1]
matcher[0]
matcher
exit
PhysicalObject::CONDITION_BOOLEAN_FIELDS.include?(condition_fields[0])
condition_fields
exit
HEADERS_TO_ASSIGNER[k]
exit
@headers[k].nil?
row[@headers[k]]
k
exit
attr_symbol
c
po.captioned
c
po.captioned
n
po.captioned
po
(attr_symbol.to_s << "=").to_sym
val
attr_symbol
c
n
! captioned.blank?
captioned
c
color_field.to_sym
c
color_field.to_sym
PhysicalObject::COLOR_COLOR_FIELDS.include?(color_field.to_sym)
c
params[:physical_object][:title_id]
c
@physical_object.title
c
params[:physical_object]
c
k
c
row[column_index DURATION]
c
row[column_index MEDIA_TYPE]
row[column_index EMAIL_ADDRESS]
row
c
/^([0-9\/?~]+)$/.match(date)
/^([0-9\/?]+)$/.match(date)
date
/^([0-9\/?]+)&/.match(date)
/^([0-9/?]+)&/.match(date)
/^([0-9\/\~\?]+)&/.match(date)
/^([0-9\/~\?]+)&/.match(date)
date
date_only.match(date)
c
date_only.match(date)c
date_only.match(date)
date_type.match(date)
date
c
error.class == ManualRollBackException
c
exit
row
c
csv[1]
csv[0]
c
csv[:header]
csv[0][1]
csv[0][0]
csv
csv[1]
csv[0]
csv
csv[0]
c
csv[1]
csv[0][0]
csv[0]
c
@filepath
c
filepath.tempfile.path
c
dates.split[DELIMITER]
dates
dates.split(DELIMITER)
DELIMITER
dates.split(" \; ")
dates.split(" ; ")
dates.to_s.split[DELIMITER]
dates.split[DELIMITER]
dates
c
cv[:condition_rating][matcher[2].to_i - 1][1]
cv[:condition_rating][matcher[2].to_i - 1][2]
cv[:condition_rating][matcher[2].to_i - 1]
matcher[2]
cv[:condition_rating]
cv[:condition_rating][matcher[2].to_i]
matcher[2]
cv[:condition_rating][matcher[2].to_i][matcher[2].to_i]
v
PhysicalObject::CONDITION_FIELDS.include?(matcher[1].parameterize.underscore.to_sym)
matcher
po.channeling
c
(matcher[1].parameterize.underscore << "=").to_sym
PhysicalObject::CONDITION_FIELDS.include?(matcher[1].parameterize.underscore.to_sym)
matcher
c
PhysicalObject::CONDITION_FIELDS.include?(matcher[1].parameterize.underscore.to_sym)
matcher
exit
c
cf
condition_fields
c
id
c
pattern.match(@continue_url)
pattern
id
c
/([0-9]+)/.match(@continue_url)[0]
pattern
pattern.match(@continue_url)
id
c
n
@continue_url.include?('collection')
n
@continue_url == new_physical_object_path
c
@continue_url.include?('collection')
n
c
session[:physical_object_create_action]
c
@continue_text
@continue_url.include?('collection')
@continue_url
@continue_text
c
@continue_url[:id]
@continue_url
c
po.research_value
n
k
k.include? (rv)
c
 @cv[:research_value].collect { |x| x[0] }[0].include?(rv)
c
 @cv[:research_value].collect { |x| x[0] }[0].include?(rv)
rv
c
 @cv[:research_value].collect { |x| x[0] }[0].include?(rv)
 @cv[:research_value].collect { |x| x[0] }
rv
c
error
n
error_msg
c
po.condition_rating
n
k.include?(cr)
k
c
k
c
k.include?(cr)
c
k.include?(cr)
c
cr
k.include?(cr)
c
cr
k.include?(cr)
k
c
k
c
@cv[:condition_rating].collect { |x| x[0] }[0].include?(cr)
cr
@cv[:condition_rating].collect { |x| x[0] }
matcher
cr
cf
c
matcher[1]
PhysicalObject::CONDITION_FIELDS
PhysicalObject::CONDITION_FIELDS.include?(matcher[1].parameterize.underscore.to_sym)
matcher
c
/#{cf.downcase}$/.match(pcf.to_s)
pcf.to_s.match(/#{cf.downcase}$/)
pcf.to_s.match(/#{cf.downcase}$/
pcf.to_s.match(/#{cf.lower}$/
pcf
c
pcf
c
pcf
c
pcf
cf
